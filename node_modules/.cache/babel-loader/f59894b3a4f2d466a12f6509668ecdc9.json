{"ast":null,"code":"var _jsxFileName = \"E:\\\\Reactjs\\\\index_bmi\\\\src\\\\component\\\\Bar.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { DataProvider, DataContext } from '../Contexts/dataContext';\nimport PropTypes from 'prop-types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Bar = ({\n  labelData,\n  bmiData\n}) => {\n  _s();\n\n  const [isWeightHeight, setWeightHeight] = useContext(DataContext);\n  let data1 = { ...isWeightHeight\n  };\n\n  Object.size = function (obj) {\n    var size = 0;\n\n    for (let key in obj) {\n      if (obj.hasOwnProperty(key)) size++;\n    }\n\n    return size;\n  };\n\n  var sizeObj = Object.size(data1);\n\n  if (sizeObj > 1) {\n    for (let i = 0; i < sizeObj; i++) {\n      if (data1[i].date !== null && data1[i] !== undefined) {\n        console.log(data1[i].date);\n        console.log(data1[i].bmi);\n      }\n    }\n  }\n\n  const data = canvas => {\n    const ctx = canvas.getContext('2d');\n    const gradient = ctx.createLinearGradient(63, 81, 181, 700);\n    gradient.addColorStop(0, '#929dd9');\n    gradient.addColorStop(1, '#172b4d');\n    return {\n      labels: isWeightHeight.date,\n      datasets: [{\n        label: 'BMI',\n        data: isWeightHeight.bmi,\n        backgroundColor: gradient,\n        borderColor: '#3F51B5',\n        pointRadius: 6,\n        pointHoverRadius: 8,\n        pointHoverBorderColor: 'white',\n        pointHoverBorderWidth: 2\n      }]\n    };\n  };\n\n  const options = {\n    responsive: true,\n    scales: {\n      xAxes: [{\n        scaleLabel: {\n          display: true,\n          labelString: 'Date',\n          fontSize: 18,\n          fontColor: 'white'\n        },\n        gridLines: {\n          display: false,\n          color: 'white'\n        },\n        ticks: {\n          fontColor: 'white',\n          fontSize: 16\n        }\n      }],\n      yAxes: [{\n        scaleLabel: {\n          display: true,\n          labelString: 'BMI',\n          fontSize: 18,\n          fontColor: 'white'\n        },\n        gridLines: {\n          display: false,\n          color: 'white'\n        },\n        ticks: {\n          fontColor: 'white',\n          fontSize: 16,\n          beginAtZero: true\n        }\n      }]\n    },\n    tooltips: {\n      titleFontSize: 13,\n      bodyFontSize: 13\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(DataProvider, {\n      children: [/*#__PURE__*/_jsxDEV(Line, {\n        data: data,\n        options: options\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }, this), isWeightHeight.map((value, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: value.date\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 56\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(Bar, \"I8MhCBOuP7N/FiBwbpyiunRo1gM=\");\n\n_c = Bar;\nBar.propTypes = {\n  labelData: PropTypes.array,\n  bmiData: PropTypes.array\n};\nexport default Bar;\n\nvar _c;\n\n$RefreshReg$(_c, \"Bar\");","map":{"version":3,"sources":["E:/Reactjs/index_bmi/src/component/Bar.js"],"names":["React","useContext","Line","DataProvider","DataContext","PropTypes","Bar","labelData","bmiData","isWeightHeight","setWeightHeight","data1","Object","size","obj","key","hasOwnProperty","sizeObj","i","date","undefined","console","log","bmi","data","canvas","ctx","getContext","gradient","createLinearGradient","addColorStop","labels","datasets","label","backgroundColor","borderColor","pointRadius","pointHoverRadius","pointHoverBorderColor","pointHoverBorderWidth","options","responsive","scales","xAxes","scaleLabel","display","labelString","fontSize","fontColor","gridLines","color","ticks","yAxes","beginAtZero","tooltips","titleFontSize","bodyFontSize","map","value","index","propTypes","array"],"mappings":"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","sourcesContent":["import React, { useContext } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport { DataProvider, DataContext } from '../Contexts/dataContext';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Bar = ({ labelData, bmiData }) => {\r\n    const [isWeightHeight, setWeightHeight] = useContext(DataContext)\r\n\r\n    let data1 = { ...isWeightHeight };\r\n    Object.size = function (obj) {\r\n        var size = 0;\r\n        for (let key in obj) {\r\n            if (obj.hasOwnProperty(key))\r\n                size++;\r\n        }\r\n        return size;\r\n    }\r\n    var sizeObj = Object.size(data1);\r\n\r\n    if (sizeObj > 1) {\r\n        for (let i = 0; i < sizeObj; i++) {\r\n            if (data1[i].date !== null && data1[i] !== undefined) {\r\n                console.log(data1[i].date)\r\n                console.log(data1[i].bmi)\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n    const data = canvas => {\r\n        const ctx = canvas.getContext('2d');\r\n        const gradient = ctx.createLinearGradient(63, 81, 181, 700);\r\n        gradient.addColorStop(0, '#929dd9');\r\n        gradient.addColorStop(1, '#172b4d');\r\n\r\n        return {\r\n            labels: isWeightHeight.date,\r\n            datasets: [\r\n                {\r\n                    label: 'BMI',\r\n                    data: isWeightHeight.bmi,\r\n                    backgroundColor: gradient,\r\n                    borderColor: '#3F51B5',\r\n                    pointRadius: 6,\r\n                    pointHoverRadius: 8,\r\n                    pointHoverBorderColor: 'white',\r\n                    pointHoverBorderWidth: 2\r\n                }\r\n            ]\r\n        };\r\n    };\r\n\r\n    const options = {\r\n        responsive: true,\r\n        scales: {\r\n            xAxes: [\r\n                {\r\n                    scaleLabel: {\r\n                        display: true,\r\n                        labelString: 'Date',\r\n                        fontSize: 18,\r\n                        fontColor: 'white'\r\n                    },\r\n                    gridLines: {\r\n                        display: false,\r\n                        color: 'white'\r\n                    },\r\n                    ticks: {\r\n                        fontColor: 'white',\r\n                        fontSize: 16\r\n                    }\r\n                }\r\n            ],\r\n            yAxes: [\r\n                {\r\n                    scaleLabel: {\r\n                        display: true,\r\n                        labelString: 'BMI',\r\n                        fontSize: 18,\r\n                        fontColor: 'white'\r\n                    },\r\n                    gridLines: {\r\n                        display: false,\r\n                        color: 'white'\r\n                    },\r\n                    ticks: {\r\n                        fontColor: 'white',\r\n                        fontSize: 16,\r\n                        beginAtZero: true\r\n                    }\r\n                }\r\n            ]\r\n        },\r\n        tooltips: {\r\n            titleFontSize: 13,\r\n            bodyFontSize: 13\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <DataProvider>\r\n                <Line data={data} options={options} />\r\n                {isWeightHeight.map((value, index) => (<div key={index}>{value.date}</div>))}\r\n            </DataProvider>\r\n        </>\r\n    );\r\n};\r\nBar.propTypes = {\r\n    labelData: PropTypes.array,\r\n    bmiData: PropTypes.array\r\n};\r\n\r\nexport default Bar;"]},"metadata":{},"sourceType":"module"}